{"title":"alloyeditor.com","githubRepo":"marcoscv-work/alloyeditor.com","googleAnalytics":"UA-37033501-5","index":{"title":"Home","description":"a modern WYSIWYG editor built on top of CKEDITOR, designed to create modern and gorgeous web content","content":" Copyright © 2017 Liferay, Inc Powered by WeDeploy™ ","srcFilePath":"src/pages/index.soy","url":"/.","children":[{"title":"Docs","description":"Everything you need to know to get started.","content":" Docs Start learning how to leverage the power of . Choose a Guide Each one provide step by step coverage for every core feature. ","srcFilePath":"src/pages/docs/index.soy","url":"/docs","children":[{"children":[{"description":"How to build a version of AlloyEditor.","layout":"guide","title":"Build it","weight":1,"content":" How to build a version of AlloyEditor. Install NodeJS Using your browser, navigate to http://nodejs.org and install NodeJS. Install Gulp Open a terminal on your computer and execute [sudo] npm install -g gulp Fork AlloyEditor Use the Fork button in our Github Repository page to get a copy of alloyEditor. After that, follow the instructions to clone the project into your computer. Install AlloyEditor dependencies Navigate to the AlloyEditor project in your computer and execute [sudo] npm install Build AlloyEditor Navigate to the AlloyEditor project in your computer and execute gulp build There are other gulp tasks you can use like release to generate a bundled zip file, or watch if you're in development mode ","srcFilePath":"src/pages/docs/develop/how_to_build_it.md","url":"/docs/develop/how_to_build_it.html"},{"children":[{"description":"If you run the editor with the default UI, which is written in React, then adding a button will be straightforward. Buttons are standard React classes. For your convenience, there is also a number of mixins, which you can use that provide basic functionality out of the box. Then, use CKEditor's API to do style the content and that is it!","layout":"guide","title":"Create Buttons","weight":1,"content":" If you run the editor with the default UI, which is written in React, then adding a button will be straightforward. Buttons are standard React classes. For your convenience, there is also a number of mixins, which you can use that provide basic functionality out of the box. Then, use CKEditor's API to do style the content and that is it! Creating a Button Example of a new button that converts the current selection into a marquee // Use the built-in version of React if your site does not use React var React = AlloyEditor.React; var ButtonMarquee = React.createClass({ mixins: [AlloyEditor.ButtonStyle, AlloyEditor.ButtonStateClasses, AlloyEditor.ButtonActionStyle], propTypes: { editor: React.PropTypes.object.isRequired }, getDefaultProps: function() { return { style: { element: 'marquee' } }; }, statics: { key: 'marquee' }, render: function() { var cssClass = 'ae-button ' + this.getStateClasses(); return ( ); } }); AlloyEditor.Buttons[ButtonMarquee.key] = AlloyEditor.ButtonMarquee = ButtonMarquee; Using a Button After creating your button, you have to add it to the configuration of the Toolbar where you want to use it. Buttons, which handle styles are usually used within the Styles Toolbar, inside a text-like selection var toolbars = [ styles: { selections: [{ name: 'text', buttons: ['styles', 'bold', 'italic', 'underline', 'link', 'twitter', 'marquee'], test: AlloyEditor.SelectionTest.text }], tabIndex: 1 } ]; In this case the Marquee button will appear after Twitter one, last on the toolbar. ","srcFilePath":"src/pages/docs/develop/create/create_buttons.md","url":"/docs/develop/create/create_buttons.html"},{"description":"AlloyEditor bundles a couple of gorgeus skins that you can use out of the box. However, if you need a better integration with your app's look and feel, you can easily create your own skin.","layout":"guide","title":"Create Skins","weight":2,"content":" AlloyEditor bundles a couple of gorgeus skins that you can use out of the box. However, if you need a better integration with your app's look and feel, you can easily create your own skin. Get ready to build AlloyEditor Follow the instructions in our How to build it guide to know how to change and build AlloyEditor. Create skin folders Create a new directory under src/ui/react/assets/icons/ with the name of your skin (e.g zebra). This directory will contain all the required icons of your skin. Create a new directory under src/ui/react/assets/sass/skin with the name of your skin (e.g zebra). This directory will contain the styling of the skin. Note: You can reuse our own Skin Architecture to simplify the process of creating your own skin! Create your Skin Place all the icons you need inside an svg folder in your skin's icon folder. These icons will be merged with the default ones, and the resulting set will be used to generate your skin icon font Create a file called main.scss inside your skin folder. This will be the entry point of your skin and should contain all the styling of your look and feel. Build the editor Your skin will be automatically picked up when building AlloyEditor: gulp [build] Use your Skin Include your skin to the page instead any of the default ones: That is everything! Now AlloyEditor will appear with a new beautiful look and feel! ","srcFilePath":"src/pages/docs/develop/create/create_skin.md","url":"/docs/develop/create/create_skin.html"},{"description":"Adding a new toolbar is also as straightforward as adding a button.","layout":"guide","title":"Create Toolbars","weight":3,"content":" Adding a new toolbar is also as straightforward as adding a button. Creating a Toolbar // Use the built-in version of React if your site does not use React var React = AlloyEditor.React; var ToolbarVersions = React.createClass({ mixins: [AlloyEditor.WidgetDropdown, AlloyEditor.WidgetExclusive, AlloyEditor.WidgetFocusManager, AlloyEditor.ToolbarButtons, AlloyEditor.WidgetPosition, AlloyEditor.WidgetArrowBox], statics: { key: 'versions' }, componentDidMount: function () { this._updatePosition(); }, componentDidUpdate: function (prevProps, prevState) { this._updatePosition(); }, getDefaultProps: function() { return { circular: true, descendants: '.ae-button, .ae-toolbar-element', keys: { next: [38, 39], prev: [37, 40] } }; }, /** Returns the class name of the toolbar in case of both exclusive and normal mode. */ _getToolbarClassName: function() { var cssClass = 'ae-toolbar-versions'; if (this.props.renderExclusive) { cssClass = 'ae-toolbar ' + this.getArrowBoxClasses(); } return cssClass; }, /** Calculates and sets the position of the toolbar in exclusive or normal mode. */ _updatePosition: function() { var region; if (this.props.selectionData) { region = this.props.selectionData.region; } if (region) { var domNode = React.findDOMNode(this); var domElement = new CKEDITOR.dom.element(domNode); var startRect = region.startRect || region; var right = this.props.editor.get('nativeEditor').editable().getClientRect().right; domNode.style.right = right + domNode.offsetWidth + this.props.gutterExclusive.left + 'px'; domNode.style.top = region.top - domNode.offsetHeight/2 + startRect.height/2 + 'px'; domNode.style.opacity = 1; domElement.removeClass('ae-arrow-box'); this.cancelAnimation(); } }, /** Lifecycle. Renders the buttons for managing version changes. */ render: function() { var buttons = this.getToolbarButtons(this.props.config.buttons); var className = this._getToolbarClassName(); return ( {buttons} ); } }); AlloyEditor.Toolbars[ToolbarVersions.key] = AlloyEditor.ToolbarVersions = ToolbarVersions; Using a Toolbar After creating your toolbar, you have to add it to the configuration of the editor where you want to use it. var toolbars = { add: { buttons: ['image', 'camera', 'hline', 'table'], tabIndex: 2 }, versions: { buttons: ['annotate', 'comment', 'acceptChanges', 'rejectChanges'], tabIndex: 1 } } In this example, annotate, comment, acceptChanges and rejectChanges will be the buttons that will be loaded on the toolbar, and that will help us handle document version changes. Read our Create Buttons Guide to know how to do this! ","srcFilePath":"src/pages/docs/develop/create/create_toolbars.md","url":"/docs/develop/create/create_toolbars.html"},{"description":"You don't like React? You prefer jQuery? Or you are JavaScript ninja and prefer writing vanilla JS? Welcome on board. You'll see how straightforward it is to create a whole new UI for AlloyEditor.","layout":"guide","title":"Create entirely new UI","weight":4,"content":" You don't like React? You prefer jQuery? Or you are JavaScript ninja and prefer writing vanilla JS? Welcome on board. You'll see how straightforward it is to create a whole new UI for AlloyEditor. Get ready to build AlloyEditor Follow the instructions in our How to build it Guide to know how to change and build AlloyEditor. Create UI folder Create a new directory under src/ui with the name of your UI (e.g jquery) Create Build Create a subfolder, called gulp-tasks and a build.js file with your custom build steps. You can check out the Gulp Project or some of the existing tasks for extra insight into the build system. Build your UI In order to build AlloyEditor using your brand new UI (jquery), run gulp --ui jquery That is everything. How will you structure the directories, which modules will you use, will you load Buttons and Toolbars on demand, what gulp tasks will you add - these questions are entirely up to you. The good news is that you won't start from scratch entirely. You still will be able to use the core of AlloyEditor, as well as the API from CKEditor. Once you are ready with the UI, please send us a pull request and we will merge it! ","srcFilePath":"src/pages/docs/develop/create/create_ui.md","url":"/docs/develop/create/create_ui.html"}],"description":"How to create your buttons, skins, toolbars and UI!","layout":"guide","title":"Create","weight":2,"content":" How to create your buttons, skins, toolbars and UI! Create Buttons If you run the editor with the default UI, which is written in React, then adding a button will be straightforward. Buttons are standard React classes. For your convenience, there is also a number of mixins, which you can use that provide basic functionality out of the box. Then, use CKEditor's API to do style the content and that is it! Please, check our Create Buttons Guide! Create Skins AlloyEditor bundles a couple of gorgeus skins that you can use out of the box. However, if you need a better integration with your app's look and feel, you can easily create your own skin. Please, check our Create Skins Guide! Create Toolbars Adding a new toolbar is also as straightforward as adding a button. Please, check our Create Toolbars Guide! Create UI You don't like React? You prefer jQuery? Or you are JavaScript ninja and prefer writing vanilla JS? Welcome on board. You'll see how straightforward it is to create a whole new UI for AlloyEditor. Please, check our Create Toolbars Guide! ","srcFilePath":"src/pages/docs/develop/create/index.md","url":"/docs/develop/create"}],"description":"The main idea behind the editor is to fully separate the core from the UI. And not only to separate it, but to give opportunity to people to add very easy new Buttons and Toolbars or to create completely new UI, based on different Framework or vanilla JavaScript.","icon":"code-file","layout":"guide","title":"Develop","weight":2,"content":" The main idea behind the editor is to fully separate the core from the UI. And not only to separate it, but to give opportunity to people to add very easy new Buttons and Toolbars or to create completely new UI, based on different Framework or vanilla JavaScript. Architecture Core Built on top of CKEditor AlloyEditor uses CKEditor under the hood to deal with the HTML. Browsers still generate very inconsistent HTML, not to mention how buggy they are. In fact, to create an editor, which is able to handle all browsers, let's say IE9+, Chrome, Firefox and Safari, is very challenging. Fortunately, CKEditor does it well, so it was the natural choice not only because of that, but because it is mature, well documented and configurable. Not everything from CKEditor is being used. In fact, AlloyEditor uses only the core from it. The whole UI has been discarded and the version of CKEditor which comes in AlloyEditor is twice smaller than the version OOTB. Plugins and UI Core On top of what CKEditor provides, new plugins and modules were created, which form the core of AlloyEditor. Among these plugins is a plugin, which adds new functions which provide information about the selection - its regions, direction and so on. This is the key part and that is what allows the Toolbars to display themselves just above or below the selection. Other plugins are related to Drag&Drop of images directly in the editor, or they provide common API for creating, editing and removing links and so on. There is no much dependency of CKEditor in AlloyEditor. If there is better base, or if we reach the point when creation of new core would be easier but we still will be able to support the majority of the browsers, nothing prevents us of replacing CKEditor core with our own. UI The UI has been thought in the way that it should provide the following functionality: Toolbars should allow adding, removing and reordering Buttons. The developer should be able to add new Toolbars to the editor. It should be easy to create a new UI. The default one uses React. However, if a developer wants to use another Framework or to create UI using vanilla JavaScript and CSS - that should be possible. Currently AlloyEditor supports only one UI - it uses React. Please feel free to contact us if you want to contribute another UI. ","srcFilePath":"src/pages/docs/develop/index.md","url":"/docs/develop"},{"description":"Documentation search results.","hidden":true,"title":"Search","content":" Electric Docs Start learning how to leverage the power of Electric. ","srcFilePath":"src/pages/docs/search.soy","url":"/docs/search.html"},{"children":[{"description":"The section below assumes that you are using the default UI, which is built using React. The AlloyEditor core is fully separated from the UI and creating another one based on any other framework is very easy.","layout":"guide","title":"How to use it","weight":1,"content":" The section below assumes that you are using the default UI, which is built using React. The AlloyEditor core is fully separated from the UI and creating another one based on any other framework is very easy. Add AlloyEditor's CSS to the page Add AlloyEditor's JS to the page There are a few ways to add the editor to the page: Add the whole editor with all UI on the page Add it on the page separating the CKEditor code from AlloyEditor. This is useful if in your project you already use CKEditor. Add it on the page separating the React code from AlloyEditor. This is useful if you already use React in your project. If you use both React and CKEditor on your page, then just include AlloyEditor's core Invoke the static editable method of AlloyEditor AlloyEditor.editable('myContentEditable'); Retrieve the content from the editor var alloyEditor = AlloyEditor.editable('myContentEditable'); var content = alloyEditor.get('nativeEditor').getData(); ","srcFilePath":"src/pages/docs/use/hot_to_use_it.md","url":"/docs/use/hot_to_use_it.html"},{"description":"Is there an existing CKEditor plugin you like? Chances are you will be able to use it with AlloyEditor as well!","layout":"guide","title":"How to use CKEditor Plugins?","weight":4,"content":" The section below assumes that you are using the default UI, which is built using React. The AlloyEditor core is fully separated from the UI and creating another one based on any other framework is very easy. Download your plugin CKEditor offers a huge selection of plugins. Find and download those you need along with all its dependencies into AlloyEditor's plugins folder. Add the CKEditor plugin All that's left for you to do is to add the plugin to your editor configuration&42; // Extend the extraPlugins value adding the new plugins to the default ones AlloyEditor.editable('contentEditable', { extraPlugins: AlloyEditor.Core.ATTRS.extraPlugins.value + ',myplugin,myplugindependency' }); &#42; Keep in mind that some plugins have dependencies that are not bundled inside AlloyEditor. You'll need to download and add them to the extraPlugins property as well Note: Keep reading if the plugin you want contains UI... Add one of AlloyEditor's ui-bridge plugins AlloyEditor provides a set of plugins that work as an adapter for CKEditor UI features generating compatible buttons, richcombos, panels and more that can be reused. All you need to do is use the appropriate ui-bridge plugin and add the buttons to an existing or new selection. For example, you can reuse the Font Size and Family Plugin like this:. var textSelection; for (var i = 0; i < AlloyEditor.Selections.length; i++) { textSelection = AlloyEditor.Selections[i]; if (textSelection.name === 'text') { break; } } textSelection.buttons = ['Font', 'FontSize'].concat(textSelection.buttons); AlloyEditor.editable('contentEditable', { extraPlugins: AlloyEditor.Core.ATTRS.extraPlugins.value + ',ae_richcombobridge,font' }); Current existing UI-Bridge plugins are: Button Panel Menu Button RichCombo Use moono skin for visual compatibility Note: AlloyEditor's UI Bridge is in its early stages, so there are still some uncovered areas. For example, `dialogs are not converted and will still appear with CKEditor's default look and feel. Use the new moono skin to close the gap between AlloyEditor default look and feel and CKEditor's. ","srcFilePath":"src/pages/docs/use/ckeditor_plugins/index.md","url":"/docs/use/ckeditor_plugins","children":[{"description":"There are some CKEDITOR plugins that it add button panel through their UI. This tutorial is about using this kind of plugins.","icon":"code-file","layout":"guide","title":"UI Button","weight":1,"content":" There are some CKEDITOR plugins that it add button panel through their UI. This tutorial is about using this kind of plugins. Example to use 'UNDO' button In this case, Undo CKEDITOR plugin exists into AlloyEditor core, but, if the plugin does not exist into AlloyEditor core, you can download it and, after that, you can paste it into plugins folder Note: Keep in mind, if this plugin has dependencies, we need to dowload and to configure them too. What CKEDITOR UI is used by plugin? This button is given by 'undo' CKEDITOR plugin. It´s code source contains this part of code: editor.ui.addButton( 'Undo', { label: editor.lang.undo.undo, command: 'undo', toolbar: 'undo,10' } ); This plugin uses editor.ui.addButton. Also, CKEDITOR plugins can use the following code to add buttons: editor.ui.add(name, CKEDITOR.UI_BUTTON, definition) Both of the ways are correct and it means that we need an AlloyEditor adapter to use this kind of CKEDITOR plugins. ae_buttonbridge AlloyEditor plugin AlloyEditor provides a plugin that works as an adapter for CKEditor UI features generating compatible buttons AlloyEditor.editable('myContentEditable', { extraPlugins: AlloyEditor.Core.ATTRS.extraPlugins.value + ',ae_buttonbridge,undo' }); AlloyEditor.Core.ATTRS.extraPlugins.value is used to keep current extraPlugins that AlloyEditor use, but you can avoid that to set your plugins there. After this step, this plugin will work, but AlloyEditor will not show the button yet. Adding 'Undo' button to AlloyEditor toolbar Following toolbar configuration, we can set toolbar buttons with 'Undo' button: var selections = AlloyEditor.Selections; //index of text toolbar selections[3].buttons.push('Undo'); AlloyEditor.editable('myContentEditable', { extraPlugins: AlloyEditor.Core.ATTRS.extraPlugins.value + ',ae_buttonbridge,undo', toolbars: { styles: { selections: selections, tabIndex: 1 } } }); ","srcFilePath":"src/pages/docs/use/ckeditor_plugins/ui_button.md","url":"/docs/use/ckeditor_plugins/ui_button.html"},{"description":"There are some CKEDITOR plugins that it add menu button through their UI. This tutorial is about using this kind of plugins.","icon":"code-file","layout":"guide","title":"UI Menu Button","weight":2,"content":" There are some CKEDITOR plugins that it add menu button through their UI. This tutorial is about using this kind of plugins. Example to use 'Spell Checker AS YOU TYPE' plugin You can download Scayt and, after that, you can paste it into plugins folder Note: Keep in mind, if this plugin has dependencies, we need to dowload and to configure them too. What CKEDITOR UI is used by plugin? The plugin´s code contains this part of code. editor.ui.add('Scayt', CKEDITOR.UI_MENUBUTTON, { label : lang.text_title, title : ( editor.plugins.wsc ? editor.lang.wsc.title : lang.text_title ), ... This plugin uses editor.ui.add(name, CKEDITOR.UI_MENUBUTTON definition). ae_menubuttonbridge AlloyEditor plugin AlloyEditor provides a plugin that works as an adapter for CKEditor UI features generating compatible menu buttons. aemenubuttonbridge uses aeuibridge and ae_menubridge AlloyEditor plugins to work. AlloyEditor.editable('myContentEditable', { extraPlugins: AlloyEditor.Core.ATTRS.extraPlugins.value + ',aeuibridge,aemenubridge,ae_menubuttonbridge,scayt' }); AlloyEditor.Core.ATTRS.extraPlugins.value is used to keep current extraPlugins that AlloyEditor use, but you can avoid that to set your plugins there. After this step, this plugin will work, but AlloyEditor will not show the button yet. Adding 'Scayt' button to AlloyEditor toolbar Into the plugin appears this code, we can set toolbar buttons with 'Scayt' button: var selections = AlloyEditor.Selections; selections[3].buttons.push('Scayt'); AlloyEditor.editable('myContentEditable', { extraPlugins: AlloyEditor.Core.ATTRS.extraPlugins.value + ',aeuibridge,aemenubridge,ae_menubuttonbridge,scayt', toolbars: { styles: { selections: selections, tabIndex: 1 } } }); ","srcFilePath":"src/pages/docs/use/ckeditor_plugins/ui_menu_button_bridge.md","url":"/docs/use/ckeditor_plugins/ui_menu_button_bridge.html"},{"description":"There are some CKEDITOR plugins that it add menu panel through their UI. This tutorial is about using this kind of plugins.","icon":"code-file","layout":"guide","title":"UI Panel Menu Button","weight":3,"content":" There are some CKEDITOR plugins that it add menu panel through their UI. This tutorial is about using this kind of plugins. Example to use 'COLOR BUTTON' button You can download color button plugin and, after that, you can paste it into plugins folder Note: Keep in mind, if this plugin has dependencies, we need to dowload and to configure them too. What CKEDITOR UI is used by plugin? This button is given by 'undo' CKEDITOR plugin. It´s code source contains this part of code: editor.ui.add( name, CKEDITOR.UI_PANELBUTTON, { label: title, title: title, modes: { wysiwyg: 1 }, ... This plugin uses editor.ui.add(name, CKEDITOR.UI_PANELBUTTON). Also, CKEDITOR plugins can use the following code to add panel button: editor.ui.addPanelMenuButton(name, definition) Both of the ways are correct and it means that we need an AlloyEditor adapter to use this kind of CKEDITOR plugins. ae_panelmenubuttonbridge AlloyEditor plugin AlloyEditor provides a plugin that works as an adapter for CKEditor UI features generating compatible panel buttons. aepanelmenubuttonbridge uses aeuibridge AlloyEditor plugin to work. AlloyEditor.editable('myContentEditable', { extraPlugins: AlloyEditor.Core.ATTRS.extraPlugins.value + ',aeuibridge,aepanelmenubuttonbridge,panel,floatpanel,button,panelbutton,colorbutton' }); AlloyEditor.Core.ATTRS.extraPlugins.value is used to keep current extraPlugins that AlloyEditor use, but you can avoid that to set your plugins there. After this step, this plugin will work, but AlloyEditor will not show the button yet. Adding 'BGColor' and 'TextColor' buttons to AlloyEditor toolbar Into the plugin appears this code, we can set toolbar buttons with 'BGColor' and 'TextColor' buttons: var selections = AlloyEditor.Selections; selections[3].buttons.push('BGColor','TextColor'); var editor1 = AlloyEditor.editable('myContentEditable', { extraPlugins: AlloyEditor.Core.ATTRS.extraPlugins.value + ',aeuibridge,aebuttonbridge,ae_panelmenubuttonbridge,panel,floatpanel,button,panelbutton,colorbutton', toolbars: { styles: { selections: selections, tabIndex: 1 } } }); ","srcFilePath":"src/pages/docs/use/ckeditor_plugins/ui_panel_menu_button.md","url":"/docs/use/ckeditor_plugins/ui_panel_menu_button.html"},{"description":"There are some CKEDITOR plugins that it add rich combo through their UI. This tutorial is about using this kind of plugins.","icon":"code-file","layout":"guide","title":"UI Rich Combo","weight":4,"content":" There are some CKEDITOR plugins that it add rich combo through their UI. This tutorial is about using this kind of plugins. Example to use 'Font Size and Family' button You can download font size and family plugin and, after that, you can paste it into plugins folder Note: Keep in mind, if this plugin has dependencies, we need to dowload and to configure them too. What CKEDITOR UI is used by plugin? The plugin´s code contains this part of code. editor.ui.addRichCombo( comboName, { label: lang.label, title: lang.panelTitle, toolbar: 'styles,' + order, ... This plugin uses editor.ui.addRichCombo(name, definition). Also, CKEDITOR plugins can use the following code to add rich combos: editor.ui.add(name, CKEDITOR.UI_RICHCOMBO, definition); Both of the ways are correct and it means that we need an AlloyEditor adapter to use this kind of CKEDITOR plugins. ae_richcombobridgebridge AlloyEditor plugin AlloyEditor provides a plugin that works as an adapter for CKEditor UI features generating compatible rich combos. aerichcombobridge uses aeuibridge AlloyEditor plugin to work. AlloyEditor.editable('myContentEditable', { extraPlugins: AlloyEditor.Core.ATTRS.extraPlugins.value + ',aeuibridge,aerichcombobridge,font' }); AlloyEditor.Core.ATTRS.extraPlugins.value is used to keep current extraPlugins that AlloyEditor use, but you can avoid that to set your plugins there. After this step, this plugin will work, but AlloyEditor will not show the button yet. Adding 'Font' and 'FontSize' buttons to AlloyEditor toolbar Into the plugin appears this code, we can set toolbar buttons with 'Font' and 'FontSize' buttons: var selections = AlloyEditor.Selections; selections[3].buttons.push('Font', 'FontSize'); var editor1 = AlloyEditor.editable('myContentEditable', { extraPlugins: AlloyEditor.Core.ATTRS.extraPlugins.value + ',aeuibridge,aerichcombobridge,font', toolbars: { styles: { selections: selections, tabIndex: 1 } } }); ","srcFilePath":"src/pages/docs/use/ckeditor_plugins/ui_rich_combo.md","url":"/docs/use/ckeditor_plugins/ui_rich_combo.html"}]}],"description":"Develop description.","icon":"code-file","layout":"guide","title":"Use","content":" The section below assumes that you are using the default UI, which is built using React. The AlloyEditor core is fully separated from the UI and creating another one based on any other framework is very easy. Download AlloyEditor Option 1) Download AlloyEditor from here, then unzip it. Option 2) Install AlloyEditor via Bower (bower install alloyeditor) Option 3) Install AlloyEditor via NPM (npm install alloyeditor) Copy and Paste If you downloaded the zip file: If you downloaded it via Bower: Use AlloyEditor Invoke the editable static method on AlloyEditor passing the ID of the node you want to edit AlloyEditor.editable('myContentEditable'); And that is everything you need to get started! ","srcFilePath":"src/pages/docs/use/index.md","url":"/docs/use"}]},{"title":"Updates","description":"Updates description.","updates":[{"version":"1.2.4","major":false,"features":[{"icon":"bugs","title":"Bugfixes and enhancements","description":"Various bugfixes and enhancements: Fixed toolbar rendering issues, button style documentation, images resizing in Firefox, passing link targets button config ButtonTargetList.","url":"https://github.com/liferay/alloy-editor/issues?q=milestone%3A1.2.4+label%3Abug"}]},{"major":false,"version":"1.2.3","features":[{"icon":"bugs","title":"Properly release resources","description":"Fixed issue with detaching events registered via CKEditor's API. The issue would cause the following exception on destroying the editor \"Uncaught TypeError Cannot read property 'getRanges' of null\". Fixed an issue that would cause the image resize markers to be still present even when the editor was destroyed.","url":"https://github.com/liferay/alloy-editor/issues?q=milestone%3A1.2.3+label%3Abug"},{"icon":"api","title":"Fire `beforeImageAdd` event in buttom-image too","description":"ButtonImage will fire `beforeImageAdd` event too","url":"https://github.com/liferay/alloy-editor/issues/534"}]},{"major":false,"version":"1.2.2","features":[{"icon":"bugs","title":"Properly position embedded media toolbar","description":"If page is scrolled, the embedded media toolbar will be positioned improperly. To fix that, scrollTop and scrollLeft properties were involved in toobar's position calculation.","url":"https://github.com/liferay/alloy-editor/issues/526"}]},{"major":false,"version":"1.2.1","features":[{"icon":"bugs","title":"Improve embedding media","description":"Embedding media has been improved and now it allows removal of the widgets using the keyboard. In addition, a new button has been added, which allows trashing embedded content.","url":"https://github.com/liferay/alloy-editor/issues/517"},{"icon":"ckeditor","title":"CKEditor was updated to v4.5.9","description":"CKEditor was updated to v4.5.9 and a bug, which was preventing the usage of CKEditor buttons in multiple AlloyEditor instances was fixed.","url":"https://github.com/liferay/alloy-editor/issues/515"},{"icon":"buttons","title":"Convert mail link","description":"The button for adding link has been improved and now it recognizes mail links. Entering `me@example.com` will be converted to  `mailto:me@example.com`. Thanks to <a href=\"https://github.com/mattleff\">Matthew Leffler</a> for his awesome contribution!","url":"https://github.com/liferay/alloy-editor/issues/522"},{"icon":"api","title":"Adding images fires `beforeImageAdd` event","description":"On adding images via paste or Drag&amp;Drop, before to append the image to the content, a `beforeImageAdd` event will be fired. The developer may subscribe to it and cancel it, this will prevent adding the image to the content.","url":"https://github.com/liferay/alloy-editor/issues/518"}]},{"major":true,"version":"1.2.0","features":[{"icon":"buttons","title":"New buttons and plugins","description":"Added two new buttons - \"indent\" and \"outdent\". See how they work <a href=\"/features/indent-outdent/\">here</a>. Added a plugin to create automatically ordered and unordered lists. You can see it in action <a href=\"/features/autolist/\">here</a>.","url":"https://github.com/liferay/alloy-editor/issues?q=milestone%3A1.2.0+label%3A%22Feature+request%22"},{"icon":"accessibility","title":"Accessibility and UX improvements","description":"Added support for keyboard navigation in link autocomplete. Table removing icon was changed.","url":"https://github.com/liferay/alloy-editor/issues?q=milestone%3A1.2.0+label%3Aenhancement"}]},{"major":true,"version":"1.1.0","features":[{"icon":"api","title":"A new way for configuring the buttons","description":"A single button can be configured without the requirement the whole toolbars configuration to be overwritten too. For that purpose, there is a new configuration property, called <strong>buttonCfg</strong>.","url":"/guides/button_configuration/"},{"icon":"buttons","title":"Adding links via AutoComplete","description":"The user is now able to add links using AutoComplete. This feature was contributed by <a href=\"https://github.com/mattleff\">Matthew Leffler</a>.","url":"/features/linkautocomplete/"},{"icon":"bugs","title":"Fixed numerous bugs","description":"A number of bugs have been fixed, most of them related to the usability of the editor.","url":"https://github.com/liferay/alloy-editor/issues?q=milestone%3A1.1.0+label%3Abug"}]},{"major":true,"version":"1.0.0","features":[{"icon":"api","title":"The API reached a stable version","description":"After almost two years of releasing versions below 1.0, the moment for releasing a stable version of the API has arrived. Since v.1.0.0 the established ways of communicating with CKEditor's engine, emitting events and receiving properties will be locked. Version 1.0 guarantees stability and full backward compatibility in all further 1.x releases."},{"icon":"buttons","title":"A new button for embedding media","description":"AlloyEditor is now able to embed media files such as videos, tweets and presentations and many others. The service is provided by <a href=\"https://iframely.com\">IFramely</a>, which means you will be able to embed content for huge set of domains. Please refer to their page for more information and terms of usage.","url":"https://github.com/liferay/alloy-editor/issues/233"},{"icon":"accessibility","title":"Cmd-L opens the Link Dialog","description":"Adding a link is now possible directly from the keyboard by pressing Cmd-L (or Ctrl-L in Windows).","url":"https://github.com/liferay/alloy-editor/issues/417"},{"icon":"bugs","title":"Fixed numerous bugs","description":"A number of bugs have been fixed, most of them related to the usability of the editor.","url":"https://github.com/liferay/alloy-editor/issues?q=milestone%3A1.0.0+label%3Abug"}]},{"version":"0.7.5","features":[{"icon":"bugs","title":"Bug Fixes","description":"Properly <a href=\"https://github.com/liferay/alloy-editor/issues/413\">updated</a> bower package with AlloyEditor version."}]},{"version":"0.7.4","features":[{"icon":"bugs","title":"Bug Fixes","description":"Fixed an <a href=\"https://github.com/liferay/alloy-editor/issues/410\">issue</a> with detecting user language. <a href=\"https://github.com/liferay/alloy-editor/issues/411\">Replaced</a> `minify-css` package (it has been deprecated) with `cssnano`."}]},{"version":"0.7.3","features":[{"icon":"bugs","title":"Bug Fixes","description":"Fixed an <a href=\"https://github.com/liferay/alloy-editor/issues/408\">issue</a> with requiring AlloyEditor on the server. On the server, when requiring `alloyeditor`, the default script will be now `alloy-editor-no-react.js`."},{"icon":"api","title":"Guide","description":"Created a <a href=\"http://alloyeditor.com/guides/react_component\">guide</a>, which shows how to create a React component and render the content on the server and to create an instance of AlloyEditor in the browser."}]},{"version":"0.7.2","features":[{"icon":"bugs","title":"Bug Fixes","description":"If React is not defined on the global space, AlloyEditor will try to <a href=\"https://github.com/liferay/alloy-editor/issues/406\">require</a> it via the `require` function."}]},{"version":"0.7.1","features":[{"icon":"buttons","title":"Link creating button is now able to set link target","description":"When user creates or edits a link, now there is a possibility to set link's target (blank, self, etc)","url":"https://github.com/liferay/alloy-editor/issues/344"},{"icon":"buttons","title":"Link creating button advances the cursor after the created link","description":"After creating a link, the cursor will be advanced after the link. This provides better UX.","url":"https://github.com/liferay/alloy-editor/issues/128"},{"icon":"ckeditor","title":"Updated to CKEditor's engine 4.5.5","description":"CKEDIOR's engine has been updated to 4.5.5, which fixes an issue with destroying CKEDITOR's instance immediately after creation.","url":"https://github.com/liferay/alloy-editor/issues/375"},{"icon":"bugs","title":"Bug Fixes","description":"Fixed an <a href=\"https://github.com/liferay/alloy-editor/issues/375\">issue</a> with destroying the instance of the editor too early, fixed an <a href=\"https://github.com/liferay/alloy-editor/issues/379\">issue</a> with initializing AlloyEditor's plugins when CKEditor's are present"},{"icon":"api","title":"New <i>autolinkAdd</i> event","description":"A new event, called <i>autolinkAdd</i> will be fired when AlloyEditor creates a link automatically","url":"https://github.com/liferay/alloy-editor/issues/388"},{"icon":"api","title":"YUI's UI removed","description":"In this version the old YUI UI has been completely removed.","url":"https://github.com/liferay/alloy-editor/issues/247"}]},{"major":true,"version":"0.7.0","features":[{"icon":"api","title":"Supports React 0.14","description":"AlloyEditor has been <a href=\"https://github.com/liferay/alloy-editor/issues/365\">updated</a> to support React 0.14 and the separation between React and ReactDOM."},{"icon":"packaging","title":"Works in GitHub Electron","description":"After heavily <a href=\"https://github.com/liferay/alloy-editor/issues/350\">discussing</a> all the possibilities to make it working with Electron, we finally did it! Since version 0.7, AlloyEditor loads fine in Electron."},{"icon":"packaging","title":"Works with Browserify","description":"Another highly requested feature was to make it <a href=\"https://github.com/liferay/alloy-editor/issues/338\">working</a> with Browserify. This became possible in version 0.7"},{"icon":"api","title":"New <em>editorUpdate</em> event","description":"AlloyEditor now <a href=\"https://github.com/liferay/alloy-editor/issues/366\">notifies</a> the outside world about state changes so other non-react apps could be seamlessly integrated."},{"icon":"bugs","title":"Bug Fixes","description":"Some bugfixes and improvements like <a href=\"https://github.com/liferay/alloy-editor/issues/181\">centering</a> the toolbar when the selection is an image or a table, <a href=\"https://github.com/liferay/alloy-editor/issues/371\">hiding</a> the toolbars after destroying and recreating the editor."}]},{"major":true,"version":"0.6.0","features":[{"icon":"buttons","title":"Image centering","description":"Adds a new <a href=\"https://github.com/liferay/alloy-editor/issues/322\">button</a> for centering images. This button was contributed by <a href=\"https://github.com/ejfrancis\">Evan Francis</a> (thanks!)","url":"/features/imagealigncenter"},{"icon":"bugs","title":"Bug Fixes","description":"Fixes issues related to keeping the toolbar in the view and <a href=\"https://github.com/liferay/alloy-editor/pull/356\">handling</a> contenteditable property on destroying the editor. Thanks to <a href=\"https://github.com/dpobel\">Damien Pobel</a> and <a href=\"https://github.com/mattleff\">Matthew Leffler</a> for the contributions!"}]},{"version":"0.5.2","features":[{"icon":"bugs","title":"Bug Fixes","description":"Fixes an <a href=\"https://github.com/liferay/alloy-editor/issues/333\">issue</a> with using non-bundled version of React"}]},{"version":"0.5.1","features":[{"icon":"bugs","title":"Bug Fixes","description":"Fixes an <a href=\"https://github.com/liferay/alloy-editor/issues/329\">issue</a> with the minimized dist files"},{"icon":"api","title":"Documentation updates","description":"Properly <a href=\"https://github.com/liferay/alloy-editor/issues/331\">documents</a> the regexBasePath property in AlloyEditor class"}]},{"major":true,"version":"0.5.0","features":[{"icon":"server","title":"AlloyEditor On The Server","description":"AlloyEditor can now be used safely in Node.js environments"},{"icon":"bugs","title":"Bug Fixes","description":"Fixes an <a href=\"https://github.com/liferay/alloy-editor/issues/325\">issue</a> regarding errors if the editor has no focus"}]},{"version":"0.4.1","features":[{"icon":"packaging","title":"Better npm Packaging","description":"Better compliance with npm packaging. Added main attribute"}]},{"major":true,"version":"0.4.0","features":[{"icon":"ckeditor","title":"CKEditor Plugin Support","description":"You can now use almost every CKEditor plugin out of the box!","url":"/guides/how_to_use_ckeditor_plugins"},{"icon":"skins","title":"Improved Skin Infrastructure","description":"Creates a new skin infrastructure, more extensible and component-based"},{"icon":"skins","title":"Atlas Skin","description":"Adds a new <stront>Atlas</stront> skin"},{"icon":"bugs","title":"Bug Fixes","description":"Fixes several issues"},{"icon":"ckeditor","title":"CKEditor 4.5.1","description":"Updates to the latest CKEditor version","url":"http://ckeditor.com/blog/CKEditor-4.5-Released"}]},{"version":"0.3.7","features":[{"icon":"bugs","title":"Bug Fixes","description":"Fixes an issue relating to the image button"}]},{"version":"0.3.6","features":[{"icon":"skins","title":"Simpler CSS Prefix","description":"Simplifies css <em>alloy-editor</em> prefix to use <em>ae</em> instead"}]},{"version":"0.3.5","features":[{"icon":"buttons","title":"Table Headings","description":"Adds support and a new button to control the heading style inside a table","url":"/features/tableheading"},{"icon":"packaging","title":"Editor Version","description":"You can now easily check the editor version being used"},{"icon":"bugs","title":"Bug Fixes","description":"Fixes issues relating to the UI disappearing in some scenarios"},{"icon":"build","title":"Better Language Support","description":"It is now possible to incrementally update lang files"}]},{"version":"0.3.4","features":[{"icon":"tests","title":"Better Test Infrastructure","description":"Improves test infrastructure and adds new tests"},{"icon":"build","title":"Compiled With Babel","description":"AlloyEditor React UI is now compiled using Babel"}]},{"version":"0.3.2","features":[{"icon":"bugs","title":"Bug Fixes","description":"Fixes several issues relating to API and CSS undesired effects"},{"icon":"packaging","title":"Updated Dependencies","description":"Updates project dependencies and adds a breaking changes file"},{"icon":"skins","title":"Improved Skin Infrastructure","description":"Separates color and font definitions to a different file"}]},{"version":"0.3.1","features":[{"icon":"packaging","title":"Bower Component","description":"AlloyEditor is now published as a Bower Component"}]},{"major":true,"version":"0.3.0","features":[{"icon":"buttons","title":"Paste Images","description":"You can now paste images directly from your clipboard!"},{"icon":"packaging","title":"Simpler Distribution Folder","description":"Simplifies the distribution folder structure"}]},{"version":"0.2.9","features":[{"icon":"bugs","title":"Bug Fixes","description":"Fixes an issue where the editor does not set <small><code>contenteditable</code></small> properly"}]},{"version":"0.2.8","features":[{"icon":"internationalization","title":"Internationalization Support","description":"You can now use AlloyEditor in your own language"},{"icon":"accessibility","title":"Screen Reader Support","description":"Improves support for screen readers"},{"icon":"bugs","title":"Bug Fixes","description":"Fixes several issues regarding to inconsistent UI behaviours"}]},{"version":"0.2.7","features":[{"icon":"bugs","title":"Bug Fixes","description":"Fixes an issue regarding to the toolbar position when using Bootstrap"},{"icon":"tests","title":"Travis & SauceLabs","description":"Updates SauceLabs configuration to properly connect with Travis"}]},{"version":"0.2.6","features":[{"icon":"skins","title":"React UI","description":"Adds a new default UI based on React"},{"icon":"buttons","title":"Tables, Styles, Images&hellip;","description":"Introduces many new buttons to add tables, styles, images from camera&hellip;","url":"/"}]},{"version":"0.2.5","features":[{"icon":"bugs","title":"Bug Fixes","description":"Fixes an issue regarding pasting content"}]},{"version":"0.2.4","features":[{"icon":"api","title":"Image Drop","description":"You can now directly use the generated dom element after dropping an image"},{"icon":"api","title":"Debounce Detach","description":"Renames the cancel method in <small><code>Debounce</code></small> to <strong>detach</strong> instead"},{"icon":"ckeditor","title":"CKEditor 4.4.5","description":"Updates to the latest CKEditor version","url":"http://ckeditor.com/blog/CKEditor-4.4.5-Released"}]},{"version":"0.2.3","features":[{"icon":"accessibility","title":"ARIA and Keyboard Support","description":"Adds basic ARIA and keyboard support for toolbars and buttons"}]},{"version":"0.2.2","features":[{"icon":"skins","title":"Skin support","description":"You can now create and use different skins"},{"icon":"api","title":"Button Configuration","description":"Allows buttons to receive complex configuration objects"},{"icon":"bugs","title":"Bug Fixes","description":"Fixes several issues"}]},{"version":"0.2.1","features":[{"icon":"license","title":"LGPL license","description":"AlloyEditor is now licensed under LGPL instead of MIT"}]}],"content":" Updates Check out what's new. ","srcFilePath":"src/pages/updates/index.soy","url":"/updates"}]}}